name: release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Push events to matching v*, i.e. v1.0, v20.15.10

permissions: write-all

jobs:
  build:
    name: build release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
        image_name:
          - amazonlinux:2
          - almalinux:9
          - ubuntu:24.04
        include:
          - arch: amd64
            rpm_arch: x86_64
            deb_arch: amd64
          - arch: arm64
            rpm_arch: aarch64
            deb_arch: arm64

    steps:
      - name: Checkout Github code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: get release version
        id: release-version
        run: |
          echo "$GITHUB_REF_NAME" | sed 's|^[a-zA-Z]\+||; s|-[0-9]\+$||; s|^|RELEASE_VERSION=|' >> $GITHUB_OUTPUT

      - name: get os_release info
        id: release_info
        run: |
          case ${{ matrix.image_name }} in
            centos:7)
              INSTALL_REQUIRED_PACKAGES_CMD="yum update -y && yum install -y python3 python3-devel perl rsync && yum groupinstall -y 'Development Tools'"
              FPM_OUTPUT_TYPE=rpm
              FPM_ARCH=${{ matrix.rpm_arch }}
              FPM_OPTIONS="--rpm-dist el7"
            ;;
            almalinux:9)
              INSTALL_REQUIRED_PACKAGES_CMD="yum update -y && yum install -y python3 python3-devel perl rsync && yum groupinstall -y 'Development Tools'"
              FPM_OUTPUT_TYPE=rpm
              FPM_ARCH=${{ matrix.rpm_arch }}
              FPM_OPTIONS="--rpm-dist el9"
            ;;
            amazonlinux:2)
              INSTALL_REQUIRED_PACKAGES_CMD="yum update -y && yum install -y python3 python3-devel perl rsync && yum groupinstall -y 'Development Tools'"
              FPM_OUTPUT_TYPE=rpm
              FPM_ARCH=${{ matrix.rpm_arch }}
              FPM_OPTIONS="--rpm-dist amzn2"
            ;;
            ubuntu:24.04)
              INSTALL_REQUIRED_PACKAGES_CMD="apt-get update && apt install -y python3 python3-dev python3-venv perl rsync build-essential"
              FPM_OUTPUT_TYPE=deb
              FPM_ARCH=${{ matrix.deb_arch }}
              FPM_OPTIONS=""
            ;;
            *)
              echo "ERROR: unsupported matrix.image_name=${{ matrix.image_name }}" 1>&2
              exit 1
            ;;
          esac
          echo "INSTALL_REQUIRED_PACKAGES_CMD=$INSTALL_REQUIRED_PACKAGES_CMD" >> $GITHUB_OUTPUT
          echo "FPM_OUTPUT_TYPE=$FPM_OUTPUT_TYPE" >> $GITHUB_OUTPUT
          echo "FPM_ARCH=$FPM_ARCH" >> $GITHUB_OUTPUT
          echo "FPM_OPTIONS=$FPM_OPTIONS" >> $GITHUB_OUTPUT

      - name: debug show GITHUB_OUTPUT
        run: echo ${{ steps.release_info.outputs }}

      - name: build on ${{ matrix.image_name }}
        run: |
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace ${{ matrix.image_name }} /bin/bash -c \
            "
            ${{ steps.release_info.outputs.INSTALL_REQUIRED_PACKAGES_CMD }}
            ./build.sh
            "

      - name: create package ${{ steps.release_info.outputs.FPM_ARCH }}
        uses: fb929/github-action-fpm@master
        with:
          fpm_opts:
            --name ${{ github.event.repository.name }}
            --version ${{ steps.release-version.outputs.RELEASE_VERSION }}
            --architecture ${{ steps.release_info.outputs.FPM_ARCH }}
            --exclude '*/.gitignore'
            --exclude '*/.git'
            --input-type dir
            --chdir ./build
            --output-type ${{ steps.release_info.outputs.FPM_OUTPUT_TYPE }}
            --rpm-tag '%define _build_id_links none'
            --rpm-tag '%undefine _missing_build_ids_terminate_build'
            ${{ steps.release_info.outputs.FPM_OPTIONS }}
          fpm_args: ./

      #- name: debug ls
      #  run: ls -al ./
      #- name: debug find
      #  run: find ./ -type f

      - name: Create release and upload assets deb and rpm
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
          files: |
            ./*.deb
            ./*.rpm
